#!/bin/bash +x

awsume -v &> /dev/null || ( echo "To use this script please install and configure AWSume"; exit 1; )
me=`basename "$0"`


create_config() {
  A=$1
  B=$2
  C=$3 
  touch $C || { echo "ERROR: Can't create file $C"; exit 1;}
  cat << EOF >$C
{
    "OldPassword": "$A",
    "NewPassword": "$B"
}
EOF
}

print_warn() {
  echo "ATTENTION!!!! PLEASE REMEMBER TO REMOVE ENTRY FROM HISTORY TO PREVENT PASSWORD LEAK!! "
  echo "You could use something like 'sed -i "/$me/d" \$HISTFILE '"
  echo "Before usage you could use 'export HISTCONTROL=ignorespace' than prepend script name with space to avoid saving to history"
  echo "In case your history is saved to memory till the end of session, you could close session, open new one and then use '$0 clear'"
  echo ""
}


if [[ "$1" == "help" || "$1" == "--help" ||"$1" == "-h" || -z "$1" ]]; then
  echo "DEFAULT USAGE: '$0 generate PASS NEWPASS [\"profile1 profile2 profile3\"]'
  in case you provide 'generate' keyword as a NEW pass - your password will be autogenerated.
  or you could use some actions: '$0 {ACTION|SWITCH} [VALUE] [PROFILES]'
  --create-config <path-to-file> - will create example json file in provided path
  --input-file - will use config json file from provided path instead of passwords provided by arguments
  clear - will check and clear you history file 
  help - will print you this message

"
  print_warn
  exit 
elif [[ "$1" == "clear" ]]; then
  sed -i "/$me/d" $HISTFILE
  exit 
elif [[ "$1" == "--create-config" ]]; then
  [[ $# -gt 1 ]] || { echo "ERROR: You didnt provide file name. Check help"; exit 1; } 
  create_config "<YOUR_CURRENT_PASSWORD>" "NEW_PASSWORD" "$2"
  echo "Config created: $2

"
  print_warn
  exit
elif [[ "$1" == "--input-file" ]]; then
  [[ ! -z $2 && -f $2 ]] && TMP_PATH="$2" || { echo "ERROR: Path to json file not provided or file do not exist"; exit 1; }
elif [[ "$1" == "change-password" ]]; then
  shift
  [[ $# -gt 1 ]] || { echo "ERROR: Not enough args. Check help"; exit 1; } 
  PASS="$1"
  [[ "$2" == "generate" ]] && { NEWPASS=$(cat /dev/urandom| tr -dc 'a-zA-Z0-9-_!@#$%^&*()_+{}|:<>?=' |fold -w 16| head -n 1); echo "Your brand new password: ${NEWPASS}"; } || NEWPASS="$2"
  TMP_PATH=/tmp/awschp$(date +%s).json.tmp
  create_config $PASS $NEWPASS $TMP_PATH
fi

if [ -z "$3" ]; then
  AWS_ACCS=(default)
  echo "WARN: No awsume profiles provided. Using default" 
else
  read -ra AWS_ACCS <<<"$3"
fi
echo ${AWS_ACCS[@]}
read -p "Are you sure you want to change password for only 'yes' or 'y' will continue: " answear
if [[ "$answear" != "yes" || "$answear" == "y" ]]; then
  echo "User interrupted"
  exit 2
fi
for ac in ${AWS_ACCS[@]}; do
  . awsume $ac
  aws iam change-password --cli-input-json file://$TMP_PATH && echo "$ac password changed" || { echo "ERROR: $ac password not changed. To debug process comands manually"; }
done

# [[ ! -z $TMP_PATH && ! "$1" == "--input-file" ]] && rm -f $TMP_PATH
